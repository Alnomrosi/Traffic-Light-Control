
Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000746  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000007ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012fa  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088c  00000000  00000000  00001c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd5  00000000  00000000  000024c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  0000309c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b7  00000000  00000000  00003278  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000083d  00000000  00000000  0000382f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 2e 03 	jmp	0x65c	; 0x65c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <main>
  74:	0c 94 a1 03 	jmp	0x742	; 0x742 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TrafficLight_APP>:
static u8 Light_Status ;

void TrafficLight_APP()
{
	// At start pedestrian Red led will off and cars green led on
	LED_Void_ON(Group_B,PIN2);	
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	0e 94 3c 01 	call	0x278	; 0x278 <LED_Void_ON>
	/*
	Normal Mode CAR Traffic Light
	*/
	
	//Green LED	ON for 5 sec
	Light_Status = Green_Light ;		// Light status		GREEN
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	LED_Void_ON(Group_A,PIN0);	
  8a:	60 e0       	ldi	r22, 0x00	; 0
  8c:	0e 94 3c 01 	call	0x278	; 0x278 <LED_Void_ON>
	Timer0_VoidStartNormalMode(5);
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Timer0_VoidStartNormalMode>
	// Green LED OFF
	LED_VOID_OFF(Group_A,PIN0);	
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
		
	// Yellow LEDs Blinking for 5 sec then yellow led off
	Light_Status = Yellow_Light ;		// Light status Yellow 
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	LED_Void_Blink(Cars_Mode);			// Blink CARS leds
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 9e 01 	call	0x33c	; 0x33c <LED_Void_Blink>
	LED_VOID_OFF(Group_A,PIN1);
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
	//LED_VOID_OFF(Group_B,PIN1);
	
	// Cars Red LED on
	Light_Status = Red_Light ;		// Light status	RED
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	LED_Void_ON(Group_A,PIN2);	
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 3c 01 	call	0x278	; 0x278 <LED_Void_ON>

	// 1 sec between pedestrian and cars LED
	Timer0_VoidStartNormalMode(5);
  c2:	85 e0       	ldi	r24, 0x05	; 5
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Timer0_VoidStartNormalMode>
	// Cars Red LED OFF
	LED_VOID_OFF(Group_A,PIN2);
  ca:	62 e0       	ldi	r22, 0x02	; 2
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
  d2:	08 95       	ret

000000d4 <INT0_ISR>:
/* pedestrian Mode when push button is activated */
void INT0_ISR(void)
{

/*Check Cars LED's status */
	switch(Light_Status)
  d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	09 f4       	brne	.+2      	; 0xde <INT0_ISR+0xa>
  dc:	48 c0       	rjmp	.+144    	; 0x16e <INT0_ISR+0x9a>
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	09 f4       	brne	.+2      	; 0xe4 <INT0_ISR+0x10>
  e2:	8c c0       	rjmp	.+280    	; 0x1fc <INT0_ISR+0x128>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	09 f0       	breq	.+2      	; 0xea <INT0_ISR+0x16>
  e8:	95 c0       	rjmp	.+298    	; 0x214 <INT0_ISR+0x140>
/*
If Car LED is green
*/
	case Green_Light:		
		/* Turn off CARS Green LED*/
		LED_VOID_OFF(Group_A,PIN0);	
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
		/* Turn off pedestrian Red LED*/
		LED_VOID_OFF(Group_B,PIN2);		
  f0:	62 e0       	ldi	r22, 0x02	; 2
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
		
		/*Both	Yellow LEDs Blinking for 5 sec then yellow leds off */
		LED_Void_Blink(Pedestrian_Mode);
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	0e 94 9e 01 	call	0x33c	; 0x33c <LED_Void_Blink>
		LED_VOID_OFF(Group_B,PIN1);
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
		LED_VOID_OFF(Group_A,PIN1);
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
		
		/*Cars Red LED on */ 
		LED_Void_ON(Group_A,PIN2);
 10e:	62 e0       	ldi	r22, 0x02	; 2
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 3c 01 	call	0x278	; 0x278 <LED_Void_ON>
		// 1 sec between pedestrian and cars LED
		Timer0_VoidStartNormalMode(1);
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Timer0_VoidStartNormalMode>
		
		/*and pedestrian Green LED on for 5 sec*/
		LED_Void_ON(Group_B,PIN0);	
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	0e 94 3c 01 	call	0x278	; 0x278 <LED_Void_ON>
		Timer0_VoidStartNormalMode(5);
 126:	85 e0       	ldi	r24, 0x05	; 5
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Timer0_VoidStartNormalMode>
		
		/*Cars Red LED off */ 
		LED_VOID_OFF(Group_A,PIN2);		
 12e:	62 e0       	ldi	r22, 0x02	; 2
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
		
		/*Both	Yellow LEDs Blinking for 5 sec then yellow LEDs off */
		LED_Void_Blink(Pedestrian_Mode);
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	0e 94 9e 01 	call	0x33c	; 0x33c <LED_Void_Blink>
		LED_VOID_OFF(Group_B,PIN1);
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
		LED_VOID_OFF(Group_A,PIN1);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
		LED_VOID_OFF(Group_B,PIN0);		// pedestrian Green LED of
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
		
		/*pedestrian Red Led on */
		/* Turn on pedestrian Red LED*/
		LED_Void_ON(Group_B,PIN2);	
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	0e 94 3c 01 	call	0x278	; 0x278 <LED_Void_ON>
		
		/*To start normal mode again: from last interrupt */ 
		// Cars	Green LED On for 5 sec 
		LED_Void_ON(Group_A,PIN0);	
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 3c 01 	call	0x278	; 0x278 <LED_Void_ON>
		Timer0_VoidStartNormalMode(1);	// at least 1 sec
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Timer0_VoidStartNormalMode>
		
		break;
 16c:	08 95       	ret
	
	case Yellow_Light:
			//Turn off peds red led 
			LED_VOID_OFF(Group_B,PIN2);
 16e:	62 e0       	ldi	r22, 0x02	; 2
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
			
			// Both Yellow led Blinking for 5 sec
			LED_Void_ON(Group_A, PIN1);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 3c 01 	call	0x278	; 0x278 <LED_Void_ON>
			LED_Void_ON(Group_B, PIN1);
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	0e 94 3c 01 	call	0x278	; 0x278 <LED_Void_ON>
			LED_Void_Blink(Pedestrian_Mode);
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	0e 94 9e 01 	call	0x33c	; 0x33c <LED_Void_Blink>
			// Turn off Yellow leds
			LED_VOID_OFF(Group_A,PIN1);
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
			LED_VOID_OFF(Group_B,PIN1);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
			
			//Turn on cars Red Led
			LED_Void_ON(Group_A, PIN2);
 19c:	62 e0       	ldi	r22, 0x02	; 2
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 3c 01 	call	0x278	; 0x278 <LED_Void_ON>
			//Turn on peds green led for 5 sec
			LED_Void_ON(Group_B,PIN0);
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 3c 01 	call	0x278	; 0x278 <LED_Void_ON>
			Timer0_VoidStartNormalMode(5);
 1ac:	85 e0       	ldi	r24, 0x05	; 5
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Timer0_VoidStartNormalMode>
			
			//Turn off cars red led 
			LED_VOID_OFF(Group_A,PIN2);
 1b4:	62 e0       	ldi	r22, 0x02	; 2
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
			//Yellow blink for 5 sec
			LED_Void_Blink(Pedestrian_Mode);
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	0e 94 9e 01 	call	0x33c	; 0x33c <LED_Void_Blink>
			LED_VOID_OFF(Group_A, PIN1);
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
			LED_VOID_OFF(Group_B, PIN1);
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
			//turn off peds green led
			LED_VOID_OFF(Group_B,PIN0);
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
			
			// turn on ped red led 
			LED_Void_ON(Group_B,PIN2);
 1da:	62 e0       	ldi	r22, 0x02	; 2
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	0e 94 3c 01 	call	0x278	; 0x278 <LED_Void_ON>
			
			// turn on cars green led 
			LED_Void_ON(Group_A,PIN0);
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 3c 01 	call	0x278	; 0x278 <LED_Void_ON>
			Timer0_VoidStartNormalMode(5);
 1ea:	85 e0       	ldi	r24, 0x05	; 5
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Timer0_VoidStartNormalMode>
			LED_VOID_OFF(Group_A,PIN0);
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_VOID_OFF>
		break; 
 1fa:	08 95       	ret
		
	case Red_Light:
	
	/* CARS red LED will on */
	LED_Void_ON(Group_A,PIN2);
 1fc:	62 e0       	ldi	r22, 0x02	; 2
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 3c 01 	call	0x278	; 0x278 <LED_Void_ON>
	
	/*pedestrian Green led on for 5 sec*/
	LED_Void_ON(Group_B,PIN0);
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	0e 94 3c 01 	call	0x278	; 0x278 <LED_Void_ON>
	Timer0_VoidStartNormalMode(5);
 20c:	85 e0       	ldi	r24, 0x05	; 5
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Timer0_VoidStartNormalMode>
 214:	08 95       	ret

00000216 <LED_VoidInit>:
/*
Initiation function for LED
*/
u8 LED_VoidInit(u8 LEDGroup_Name, u8 LEDPIN_Number)
{
	switch(LEDGroup_Name)
 216:	82 30       	cpi	r24, 0x02	; 2
 218:	89 f0       	breq	.+34     	; 0x23c <LED_VoidInit+0x26>
 21a:	18 f4       	brcc	.+6      	; 0x222 <LED_VoidInit+0xc>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	31 f0       	breq	.+12     	; 0x22c <LED_VoidInit+0x16>
 220:	25 c0       	rjmp	.+74     	; 0x26c <LED_VoidInit+0x56>
 222:	83 30       	cpi	r24, 0x03	; 3
 224:	99 f0       	breq	.+38     	; 0x24c <LED_VoidInit+0x36>
 226:	84 30       	cpi	r24, 0x04	; 4
 228:	c9 f0       	breq	.+50     	; 0x25c <LED_VoidInit+0x46>
 22a:	20 c0       	rjmp	.+64     	; 0x26c <LED_VoidInit+0x56>
	{
		case Group_A:
		DIO_VoidSetPinDir(Group_A, LEDPIN_Number, Output);
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 f6 01 	call	0x3ec	; 0x3ec <DIO_VoidSetPinDir>
		LED_ErrorStatus = LED_Ok ;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <LED_ErrorStatus>
		break;
 23a:	1b c0       	rjmp	.+54     	; 0x272 <LED_VoidInit+0x5c>
		case Group_B:
		DIO_VoidSetPinDir(Group_B, LEDPIN_Number, Output);
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	0e 94 f6 01 	call	0x3ec	; 0x3ec <DIO_VoidSetPinDir>
		LED_ErrorStatus = LED_Ok ;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <LED_ErrorStatus>
		break;
 24a:	13 c0       	rjmp	.+38     	; 0x272 <LED_VoidInit+0x5c>
		case Group_C:
		DIO_VoidSetPinDir(Group_C, LEDPIN_Number, Output);
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	83 e0       	ldi	r24, 0x03	; 3
 250:	0e 94 f6 01 	call	0x3ec	; 0x3ec <DIO_VoidSetPinDir>
		LED_ErrorStatus = LED_Ok ;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <LED_ErrorStatus>
		break;
 25a:	0b c0       	rjmp	.+22     	; 0x272 <LED_VoidInit+0x5c>
		case Group_D:
		DIO_VoidSetPinDir(Group_D, LEDPIN_Number, Output);
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	0e 94 f6 01 	call	0x3ec	; 0x3ec <DIO_VoidSetPinDir>
		LED_ErrorStatus = LED_Ok ;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <LED_ErrorStatus>
		break;
 26a:	03 c0       	rjmp	.+6      	; 0x272 <LED_VoidInit+0x5c>
		default:
		LED_ErrorStatus = LED_Fail ;
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <LED_ErrorStatus>
		break;
	}
	return LED_ErrorStatus ;
}
 272:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <LED_ErrorStatus>
 276:	08 95       	ret

00000278 <LED_Void_ON>:
/*
Turn on LED
*/
u8 LED_Void_ON(u8 LEDGroup_Name, u8 LEDPIN_Number)
{
	switch(LEDGroup_Name)
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	89 f0       	breq	.+34     	; 0x29e <LED_Void_ON+0x26>
 27c:	18 f4       	brcc	.+6      	; 0x284 <LED_Void_ON+0xc>
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	31 f0       	breq	.+12     	; 0x28e <LED_Void_ON+0x16>
 282:	25 c0       	rjmp	.+74     	; 0x2ce <LED_Void_ON+0x56>
 284:	83 30       	cpi	r24, 0x03	; 3
 286:	99 f0       	breq	.+38     	; 0x2ae <LED_Void_ON+0x36>
 288:	84 30       	cpi	r24, 0x04	; 4
 28a:	c9 f0       	breq	.+50     	; 0x2be <LED_Void_ON+0x46>
 28c:	20 c0       	rjmp	.+64     	; 0x2ce <LED_Void_ON+0x56>
	{
		case Group_A:
		DIO_VoidWritePin(Group_A,LEDPIN_Number, HIGH);
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_VoidWritePin>
		LED_ErrorStatus = LED_Ok ;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <LED_ErrorStatus>
		break;
 29c:	1b c0       	rjmp	.+54     	; 0x2d4 <LED_Void_ON+0x5c>
		case Group_B:
		DIO_VoidWritePin(Group_B,LEDPIN_Number, HIGH);
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_VoidWritePin>
		LED_ErrorStatus = LED_Ok ;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <LED_ErrorStatus>
		break;
 2ac:	13 c0       	rjmp	.+38     	; 0x2d4 <LED_Void_ON+0x5c>
		case Group_C:
		DIO_VoidWritePin(Group_C,LEDPIN_Number, HIGH);
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_VoidWritePin>
		LED_ErrorStatus = LED_Ok ;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <LED_ErrorStatus>
		break;
 2bc:	0b c0       	rjmp	.+22     	; 0x2d4 <LED_Void_ON+0x5c>
		case Group_D:
		DIO_VoidWritePin(Group_D,LEDPIN_Number, HIGH);
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	84 e0       	ldi	r24, 0x04	; 4
 2c2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_VoidWritePin>
		LED_ErrorStatus = LED_Ok ;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <LED_ErrorStatus>
		break;
 2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <LED_Void_ON+0x5c>
		default:
		LED_ErrorStatus = LED_Fail ;
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <LED_ErrorStatus>
		break;
	}
	
	return LED_ErrorStatus ;
	
}
 2d4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <LED_ErrorStatus>
 2d8:	08 95       	ret

000002da <LED_VOID_OFF>:
/*
Turn of LED
*/
u8 LED_VOID_OFF(u8 LEDGroup_Name, u8 LEDPIN_Number)
{
				switch(LEDGroup_Name)
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	89 f0       	breq	.+34     	; 0x300 <LED_VOID_OFF+0x26>
 2de:	18 f4       	brcc	.+6      	; 0x2e6 <LED_VOID_OFF+0xc>
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	31 f0       	breq	.+12     	; 0x2f0 <LED_VOID_OFF+0x16>
 2e4:	25 c0       	rjmp	.+74     	; 0x330 <LED_VOID_OFF+0x56>
 2e6:	83 30       	cpi	r24, 0x03	; 3
 2e8:	99 f0       	breq	.+38     	; 0x310 <LED_VOID_OFF+0x36>
 2ea:	84 30       	cpi	r24, 0x04	; 4
 2ec:	c9 f0       	breq	.+50     	; 0x320 <LED_VOID_OFF+0x46>
 2ee:	20 c0       	rjmp	.+64     	; 0x330 <LED_VOID_OFF+0x56>
				{
					case Group_A:
					DIO_VoidWritePin(Group_A,LEDPIN_Number, LOW);
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_VoidWritePin>
					LED_ErrorStatus = LED_Ok ;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <LED_ErrorStatus>
					break;
 2fe:	1b c0       	rjmp	.+54     	; 0x336 <LED_VOID_OFF+0x5c>
					case Group_B:
					DIO_VoidWritePin(Group_B,LEDPIN_Number, LOW);
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_VoidWritePin>
					LED_ErrorStatus = LED_Ok ;
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <LED_ErrorStatus>
					break;
 30e:	13 c0       	rjmp	.+38     	; 0x336 <LED_VOID_OFF+0x5c>
					case Group_C:
					DIO_VoidWritePin(Group_C,LEDPIN_Number, LOW);
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_VoidWritePin>
					LED_ErrorStatus = LED_Ok ;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <LED_ErrorStatus>
					break;
 31e:	0b c0       	rjmp	.+22     	; 0x336 <LED_VOID_OFF+0x5c>
					case Group_D:
					DIO_VoidWritePin(Group_D,LEDPIN_Number, LOW);
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	84 e0       	ldi	r24, 0x04	; 4
 324:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_VoidWritePin>
					LED_ErrorStatus = LED_Ok ;
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <LED_ErrorStatus>
					break;
 32e:	03 c0       	rjmp	.+6      	; 0x336 <LED_VOID_OFF+0x5c>
					default:
					LED_ErrorStatus = LED_Fail;
 330:	82 e0       	ldi	r24, 0x02	; 2
 332:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <LED_ErrorStatus>
					break;
				}
	return LED_ErrorStatus;
}
 336:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <LED_ErrorStatus>
 33a:	08 95       	ret

0000033c <LED_Void_Blink>:
/*
Blinking Yellow Lights
*/

u8 LED_Void_Blink(u8 Mode_Type)
{
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
	u16 Counter_Value = 0 ;

switch(Mode_Type)
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	39 f1       	breq	.+78     	; 0x392 <LED_Void_Blink+0x56>
 344:	82 30       	cpi	r24, 0x02	; 2
 346:	91 f0       	breq	.+36     	; 0x36c <LED_Void_Blink+0x30>
 348:	29 c0       	rjmp	.+82     	; 0x39c <LED_Void_Blink+0x60>
{
LED_ErrorStatus = LED_Fail ;
case Pedestrian_Mode:	
	while(Counter_Value != 5)
	{	
	DIO_VoidTogglePin(Group_A, PIN1);	// Yellow CARS
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <DIO_VoidTogglePin>
	DIO_VoidTogglePin(Group_B, PIN1);	// YELLOW Peds
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <DIO_VoidTogglePin>
	Timer0_VoidStartNormalMode(1);
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Timer0_VoidStartNormalMode>
	Counter_Value ++ ;
 362:	21 96       	adiw	r28, 0x01	; 1
	LED_ErrorStatus = LED_Ok ;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <LED_ErrorStatus>
 36a:	02 c0       	rjmp	.+4      	; 0x370 <LED_Void_Blink+0x34>

u8 LED_Void_Blink(u8 Mode_Type)
{
	u16 Counter_Value = 0 ;

switch(Mode_Type)
 36c:	c0 e0       	ldi	r28, 0x00	; 0
 36e:	d0 e0       	ldi	r29, 0x00	; 0
{
LED_ErrorStatus = LED_Fail ;
case Pedestrian_Mode:	
	while(Counter_Value != 5)
 370:	c5 30       	cpi	r28, 0x05	; 5
 372:	d1 05       	cpc	r29, r1
 374:	51 f7       	brne	.-44     	; 0x34a <LED_Void_Blink+0xe>
 376:	12 c0       	rjmp	.+36     	; 0x39c <LED_Void_Blink+0x60>
	Counter_Value = 0 ;
	break;
case Cars_Mode:
	while(Counter_Value != 5)
	{
		DIO_VoidTogglePin(Group_A, PIN1);	// Yellow CARS
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <DIO_VoidTogglePin>
		Timer0_VoidStartNormalMode(1);
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Timer0_VoidStartNormalMode>
		Counter_Value ++ ;
 388:	21 96       	adiw	r28, 0x01	; 1
		LED_ErrorStatus = LED_Ok ;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <LED_ErrorStatus>
 390:	02 c0       	rjmp	.+4      	; 0x396 <LED_Void_Blink+0x5a>

u8 LED_Void_Blink(u8 Mode_Type)
{
	u16 Counter_Value = 0 ;

switch(Mode_Type)
 392:	c0 e0       	ldi	r28, 0x00	; 0
 394:	d0 e0       	ldi	r29, 0x00	; 0
	};
	
	Counter_Value = 0 ;
	break;
case Cars_Mode:
	while(Counter_Value != 5)
 396:	c5 30       	cpi	r28, 0x05	; 5
 398:	d1 05       	cpc	r29, r1
 39a:	71 f7       	brne	.-36     	; 0x378 <LED_Void_Blink+0x3c>
	Counter_Value = 0 ;
}

return LED_ErrorStatus ;

 39c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <LED_ErrorStatus>
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <main>:
	
	
	/* Initiations section */
	
	/* CAR'S LED */
	LED_VoidInit(Group_A,PIN0);
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 0b 01 	call	0x216	; 0x216 <LED_VoidInit>
	LED_VoidInit(Group_A,PIN1);
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 0b 01 	call	0x216	; 0x216 <LED_VoidInit>
	LED_VoidInit(Group_A,PIN2);
 3b6:	62 e0       	ldi	r22, 0x02	; 2
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	0e 94 0b 01 	call	0x216	; 0x216 <LED_VoidInit>
	
	/* Pedestrian  LEDs */
	LED_VoidInit(Group_B,PIN0);
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	0e 94 0b 01 	call	0x216	; 0x216 <LED_VoidInit>
	LED_VoidInit(Group_B,PIN1);
 3c6:	61 e0       	ldi	r22, 0x01	; 1
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	0e 94 0b 01 	call	0x216	; 0x216 <LED_VoidInit>
	LED_VoidInit(Group_B,PIN2);
 3ce:	62 e0       	ldi	r22, 0x02	; 2
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	0e 94 0b 01 	call	0x216	; 0x216 <LED_VoidInit>
	
	/* Timer0 */
	Timer0_VoidInitNomralMode();
 3d6:	0e 94 57 03 	call	0x6ae	; 0x6ae <Timer0_VoidInitNomralMode>
		
	/* Interrupts */
	EXTI_VoidInitINT0();
 3da:	0e 94 19 03 	call	0x632	; 0x632 <EXTI_VoidInitINT0>
	EXTI_u8INT0_VoidCallbackFunction(INT0_ISR);		//Callback function
 3de:	8a e6       	ldi	r24, 0x6A	; 106
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 26 03 	call	0x64c	; 0x64c <EXTI_u8INT0_VoidCallbackFunction>
	
    while (1) 
    {
		

	TrafficLight_APP();
 3e6:	0e 94 3e 00 	call	0x7c	; 0x7c <TrafficLight_APP>
 3ea:	fd cf       	rjmp	.-6      	; 0x3e6 <main+0x40>

000003ec <DIO_VoidSetPinDir>:
		break;
	}
	
	return Return_Value ;
	
}
 3ec:	41 30       	cpi	r20, 0x01	; 1
 3ee:	b9 f5       	brne	.+110    	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 3f0:	82 30       	cpi	r24, 0x02	; 2
 3f2:	a1 f0       	breq	.+40     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3f4:	18 f4       	brcc	.+6      	; 0x3fc <DIO_VoidSetPinDir+0x10>
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	31 f0       	breq	.+12     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fa:	08 95       	ret
 3fc:	83 30       	cpi	r24, 0x03	; 3
 3fe:	c9 f0       	breq	.+50     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 400:	84 30       	cpi	r24, 0x04	; 4
 402:	11 f1       	breq	.+68     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 404:	08 95       	ret
 406:	2a b3       	in	r18, 0x1a	; 26
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	82 2b       	or	r24, r18
 418:	8a bb       	out	0x1a, r24	; 26
 41a:	08 95       	ret
 41c:	27 b3       	in	r18, 0x17	; 23
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	6a 95       	dec	r22
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	82 2b       	or	r24, r18
 42e:	87 bb       	out	0x17, r24	; 23
 430:	08 95       	ret
 432:	24 b3       	in	r18, 0x14	; 20
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	02 c0       	rjmp	.+4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	6a 95       	dec	r22
 440:	e2 f7       	brpl	.-8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 442:	82 2b       	or	r24, r18
 444:	84 bb       	out	0x14, r24	; 20
 446:	08 95       	ret
 448:	21 b3       	in	r18, 0x11	; 17
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	6a 95       	dec	r22
 456:	e2 f7       	brpl	.-8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 458:	82 2b       	or	r24, r18
 45a:	81 bb       	out	0x11, r24	; 17
 45c:	08 95       	ret
 45e:	41 11       	cpse	r20, r1
 460:	3a c0       	rjmp	.+116    	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 462:	82 30       	cpi	r24, 0x02	; 2
 464:	a9 f0       	breq	.+42     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 466:	18 f4       	brcc	.+6      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 468:	81 30       	cpi	r24, 0x01	; 1
 46a:	31 f0       	breq	.+12     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 46c:	08 95       	ret
 46e:	83 30       	cpi	r24, 0x03	; 3
 470:	d9 f0       	breq	.+54     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 472:	84 30       	cpi	r24, 0x04	; 4
 474:	29 f1       	breq	.+74     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 476:	08 95       	ret
 478:	2a b3       	in	r18, 0x1a	; 26
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	6a 95       	dec	r22
 486:	e2 f7       	brpl	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	80 95       	com	r24
 48a:	82 23       	and	r24, r18
 48c:	8a bb       	out	0x1a, r24	; 26
 48e:	08 95       	ret
 490:	27 b3       	in	r18, 0x17	; 23
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	6a 95       	dec	r22
 49e:	e2 f7       	brpl	.-8      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 4a0:	80 95       	com	r24
 4a2:	82 23       	and	r24, r18
 4a4:	87 bb       	out	0x17, r24	; 23
 4a6:	08 95       	ret
 4a8:	24 b3       	in	r18, 0x14	; 20
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4b8:	80 95       	com	r24
 4ba:	82 23       	and	r24, r18
 4bc:	84 bb       	out	0x14, r24	; 20
 4be:	08 95       	ret
 4c0:	21 b3       	in	r18, 0x11	; 17
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	6a 95       	dec	r22
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4d0:	80 95       	com	r24
 4d2:	82 23       	and	r24, r18
 4d4:	81 bb       	out	0x11, r24	; 17
 4d6:	08 95       	ret

000004d8 <DIO_VoidWritePin>:
 4d8:	41 30       	cpi	r20, 0x01	; 1
 4da:	b9 f5       	brne	.+110    	; 0x54a <DIO_VoidWritePin+0x72>
 4dc:	82 30       	cpi	r24, 0x02	; 2
 4de:	a1 f0       	breq	.+40     	; 0x508 <DIO_VoidWritePin+0x30>
 4e0:	18 f4       	brcc	.+6      	; 0x4e8 <DIO_VoidWritePin+0x10>
 4e2:	81 30       	cpi	r24, 0x01	; 1
 4e4:	31 f0       	breq	.+12     	; 0x4f2 <DIO_VoidWritePin+0x1a>
 4e6:	08 95       	ret
 4e8:	83 30       	cpi	r24, 0x03	; 3
 4ea:	c9 f0       	breq	.+50     	; 0x51e <DIO_VoidWritePin+0x46>
 4ec:	84 30       	cpi	r24, 0x04	; 4
 4ee:	11 f1       	breq	.+68     	; 0x534 <DIO_VoidWritePin+0x5c>
 4f0:	08 95       	ret
 4f2:	2b b3       	in	r18, 0x1b	; 27
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_VoidWritePin+0x26>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	6a 95       	dec	r22
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_VoidWritePin+0x22>
 502:	82 2b       	or	r24, r18
 504:	8b bb       	out	0x1b, r24	; 27
 506:	08 95       	ret
 508:	28 b3       	in	r18, 0x18	; 24
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_VoidWritePin+0x3c>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	6a 95       	dec	r22
 516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_VoidWritePin+0x38>
 518:	82 2b       	or	r24, r18
 51a:	88 bb       	out	0x18, r24	; 24
 51c:	08 95       	ret
 51e:	25 b3       	in	r18, 0x15	; 21
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_VoidWritePin+0x52>
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	6a 95       	dec	r22
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_VoidWritePin+0x4e>
 52e:	82 2b       	or	r24, r18
 530:	85 bb       	out	0x15, r24	; 21
 532:	08 95       	ret
 534:	22 b3       	in	r18, 0x12	; 18
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_VoidWritePin+0x68>
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	6a 95       	dec	r22
 542:	e2 f7       	brpl	.-8      	; 0x53c <DIO_VoidWritePin+0x64>
 544:	82 2b       	or	r24, r18
 546:	82 bb       	out	0x12, r24	; 18
 548:	08 95       	ret
 54a:	41 11       	cpse	r20, r1
 54c:	3a c0       	rjmp	.+116    	; 0x5c2 <DIO_VoidWritePin+0xea>
 54e:	82 30       	cpi	r24, 0x02	; 2
 550:	a9 f0       	breq	.+42     	; 0x57c <DIO_VoidWritePin+0xa4>
 552:	18 f4       	brcc	.+6      	; 0x55a <DIO_VoidWritePin+0x82>
 554:	81 30       	cpi	r24, 0x01	; 1
 556:	31 f0       	breq	.+12     	; 0x564 <DIO_VoidWritePin+0x8c>
 558:	08 95       	ret
 55a:	83 30       	cpi	r24, 0x03	; 3
 55c:	d9 f0       	breq	.+54     	; 0x594 <DIO_VoidWritePin+0xbc>
 55e:	84 30       	cpi	r24, 0x04	; 4
 560:	29 f1       	breq	.+74     	; 0x5ac <DIO_VoidWritePin+0xd4>
 562:	08 95       	ret
 564:	2b b3       	in	r18, 0x1b	; 27
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_VoidWritePin+0x98>
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	6a 95       	dec	r22
 572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_VoidWritePin+0x94>
 574:	80 95       	com	r24
 576:	82 23       	and	r24, r18
 578:	8b bb       	out	0x1b, r24	; 27
 57a:	08 95       	ret
 57c:	28 b3       	in	r18, 0x18	; 24
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_VoidWritePin+0xb0>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	6a 95       	dec	r22
 58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_VoidWritePin+0xac>
 58c:	80 95       	com	r24
 58e:	82 23       	and	r24, r18
 590:	88 bb       	out	0x18, r24	; 24
 592:	08 95       	ret
 594:	25 b3       	in	r18, 0x15	; 21
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_VoidWritePin+0xc8>
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	6a 95       	dec	r22
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_VoidWritePin+0xc4>
 5a4:	80 95       	com	r24
 5a6:	82 23       	and	r24, r18
 5a8:	85 bb       	out	0x15, r24	; 21
 5aa:	08 95       	ret
 5ac:	22 b3       	in	r18, 0x12	; 18
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_VoidWritePin+0xe0>
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	6a 95       	dec	r22
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_VoidWritePin+0xdc>
 5bc:	80 95       	com	r24
 5be:	82 23       	and	r24, r18
 5c0:	82 bb       	out	0x12, r24	; 18
 5c2:	08 95       	ret

000005c4 <DIO_VoidTogglePin>:

void DIO_VoidTogglePin(u8 Group_Name, u8 Pin_Number)
{
		switch(Group_Name)
 5c4:	82 30       	cpi	r24, 0x02	; 2
 5c6:	a1 f0       	breq	.+40     	; 0x5f0 <DIO_VoidTogglePin+0x2c>
 5c8:	18 f4       	brcc	.+6      	; 0x5d0 <DIO_VoidTogglePin+0xc>
 5ca:	81 30       	cpi	r24, 0x01	; 1
 5cc:	31 f0       	breq	.+12     	; 0x5da <DIO_VoidTogglePin+0x16>
 5ce:	08 95       	ret
 5d0:	83 30       	cpi	r24, 0x03	; 3
 5d2:	c9 f0       	breq	.+50     	; 0x606 <DIO_VoidTogglePin+0x42>
 5d4:	84 30       	cpi	r24, 0x04	; 4
 5d6:	11 f1       	breq	.+68     	; 0x61c <DIO_VoidTogglePin+0x58>
 5d8:	08 95       	ret
		{
			case Group_A:	TOG_Bit(DIO_PORTA,Pin_Number); break;
 5da:	2b b3       	in	r18, 0x1b	; 27
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_VoidTogglePin+0x22>
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	6a 95       	dec	r22
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_VoidTogglePin+0x1e>
 5ea:	82 27       	eor	r24, r18
 5ec:	8b bb       	out	0x1b, r24	; 27
 5ee:	08 95       	ret
			case Group_B:	TOG_Bit(DIO_PORTB,Pin_Number); break;
 5f0:	28 b3       	in	r18, 0x18	; 24
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_VoidTogglePin+0x38>
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	6a 95       	dec	r22
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_VoidTogglePin+0x34>
 600:	82 27       	eor	r24, r18
 602:	88 bb       	out	0x18, r24	; 24
 604:	08 95       	ret
			case Group_C:	TOG_Bit(DIO_PORTC,Pin_Number); break;
 606:	25 b3       	in	r18, 0x15	; 21
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	02 c0       	rjmp	.+4      	; 0x612 <DIO_VoidTogglePin+0x4e>
 60e:	88 0f       	add	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	6a 95       	dec	r22
 614:	e2 f7       	brpl	.-8      	; 0x60e <DIO_VoidTogglePin+0x4a>
 616:	82 27       	eor	r24, r18
 618:	85 bb       	out	0x15, r24	; 21
 61a:	08 95       	ret
			case Group_D:	TOG_Bit(DIO_PORTD,Pin_Number); break;
 61c:	22 b3       	in	r18, 0x12	; 18
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_VoidTogglePin+0x64>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	6a 95       	dec	r22
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_VoidTogglePin+0x60>
 62c:	82 27       	eor	r24, r18
 62e:	82 bb       	out	0x12, r24	; 18
 630:	08 95       	ret

00000632 <EXTI_VoidInitINT0>:
static void (*EXTI_INT0Func)(void ) = NULL ;

void EXTI_VoidInitINT0()
{
	/* Enable Globale Interupt */
	SET_Bit(GLI_SREG,SREG_GEI);
 632:	8f b7       	in	r24, 0x3f	; 63
 634:	80 68       	ori	r24, 0x80	; 128
 636:	8f bf       	out	0x3f, r24	; 63
	
	/* Generate Interrupt in rising edge for Interrupt 0 */
	SET_Bit(EXTI_MCUCR,MCUCR_ISC01);
 638:	85 b7       	in	r24, 0x35	; 53
 63a:	82 60       	ori	r24, 0x02	; 2
 63c:	85 bf       	out	0x35, r24	; 53
	SET_Bit(EXTI_MCUCR,MCUCR_ISC00);
 63e:	85 b7       	in	r24, 0x35	; 53
 640:	81 60       	ori	r24, 0x01	; 1
 642:	85 bf       	out	0x35, r24	; 53

	/*Enable Interrupt 0 from General Interrupt control register  */
	SET_Bit(EXTI_GICR,GICR_INT0);
 644:	8b b7       	in	r24, 0x3b	; 59
 646:	80 64       	ori	r24, 0x40	; 64
 648:	8b bf       	out	0x3b, r24	; 59
 64a:	08 95       	ret

0000064c <EXTI_u8INT0_VoidCallbackFunction>:

u8 EXTI_u8INT0_VoidCallbackFunction(void (*Copy_Func)(void))
{
	u8 Return_value ;

	if (Copy_Func != NULL)
 64c:	00 97       	sbiw	r24, 0x00	; 0
 64e:	21 f0       	breq	.+8      	; 0x658 <EXTI_u8INT0_VoidCallbackFunction+0xc>
	{
		
		EXTI_INT0Func = Copy_Func ;
 650:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <EXTI_INT0Func+0x1>
 654:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <EXTI_INT0Func>
		Return_value = 0 ;
	}

	return 	Return_value ;

}
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	08 95       	ret

0000065c <__vector_1>:


// ISR
void __vector_1 (void) __attribute__ ((signal));
void __vector_1	(void)
{
 65c:	1f 92       	push	r1
 65e:	0f 92       	push	r0
 660:	0f b6       	in	r0, 0x3f	; 63
 662:	0f 92       	push	r0
 664:	11 24       	eor	r1, r1
 666:	2f 93       	push	r18
 668:	3f 93       	push	r19
 66a:	4f 93       	push	r20
 66c:	5f 93       	push	r21
 66e:	6f 93       	push	r22
 670:	7f 93       	push	r23
 672:	8f 93       	push	r24
 674:	9f 93       	push	r25
 676:	af 93       	push	r26
 678:	bf 93       	push	r27
 67a:	ef 93       	push	r30
 67c:	ff 93       	push	r31
	if(EXTI_INT0Func != NULL)
 67e:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <EXTI_INT0Func>
 682:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <EXTI_INT0Func+0x1>
 686:	30 97       	sbiw	r30, 0x00	; 0
 688:	09 f0       	breq	.+2      	; 0x68c <__vector_1+0x30>
	{
		EXTI_INT0Func();
 68a:	09 95       	icall
	}
	else
	{
		// Do nothing
	}
 68c:	ff 91       	pop	r31
 68e:	ef 91       	pop	r30
 690:	bf 91       	pop	r27
 692:	af 91       	pop	r26
 694:	9f 91       	pop	r25
 696:	8f 91       	pop	r24
 698:	7f 91       	pop	r23
 69a:	6f 91       	pop	r22
 69c:	5f 91       	pop	r21
 69e:	4f 91       	pop	r20
 6a0:	3f 91       	pop	r19
 6a2:	2f 91       	pop	r18
 6a4:	0f 90       	pop	r0
 6a6:	0f be       	out	0x3f, r0	; 63
 6a8:	0f 90       	pop	r0
 6aa:	1f 90       	pop	r1
 6ac:	18 95       	reti

000006ae <Timer0_VoidInitNomralMode>:
#include "../Header/Timer0_Private.h"

void Timer0_VoidInitNomralMode()
{
	// Normal Mode
	Timer0_TCCR0 = 0x00 ;
 6ae:	13 be       	out	0x33, r1	; 51
	// Set Initial Value
	Timer0_TCNT0 = 0x00 ;
 6b0:	12 be       	out	0x32, r1	; 50
 6b2:	08 95       	ret

000006b4 <Timer0_VoidStartNormalMode>:

void Timer0_VoidStartNormalMode(u16 Time_Delay)
{
	
	
	if(Time_Delay == 5)			// 5 Seconed Timer
 6b4:	85 30       	cpi	r24, 0x05	; 5
 6b6:	91 05       	cpc	r25, r1
 6b8:	91 f4       	brne	.+36     	; 0x6de <Timer0_VoidStartNormalMode+0x2a>
	{
	 Number_overFlow = 305; 
 6ba:	81 e3       	ldi	r24, 0x31	; 49
 6bc:	91 e0       	ldi	r25, 0x01	; 1
 6be:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <Number_overFlow+0x1>
 6c2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Number_overFlow>
	//Initial Value
	Timer0_TCNT0 = 0xFF ;
 6c6:	8f ef       	ldi	r24, 0xFF	; 255
 6c8:	82 bf       	out	0x32, r24	; 50
	// Set 1/64 prescaller
	SET_Bit(Timer0_TCCR0,Timer0_CS00) ;
 6ca:	83 b7       	in	r24, 0x33	; 51
 6cc:	81 60       	ori	r24, 0x01	; 1
 6ce:	83 bf       	out	0x33, r24	; 51
	SET_Bit(Timer0_TCCR0,Timer0_CS01) ;
 6d0:	83 b7       	in	r24, 0x33	; 51
 6d2:	82 60       	ori	r24, 0x02	; 2
 6d4:	83 bf       	out	0x33, r24	; 51
	CLR_Bit(Timer0_TCCR0,Timer0_CS02) ;
 6d6:	83 b7       	in	r24, 0x33	; 51
 6d8:	8b 7f       	andi	r24, 0xFB	; 251
 6da:	83 bf       	out	0x33, r24	; 51
 6dc:	22 c0       	rjmp	.+68     	; 0x722 <Timer0_VoidStartNormalMode+0x6e>
	}
	else if(Time_Delay == 1)	// 1 Seconed Timer
 6de:	01 97       	sbiw	r24, 0x01	; 1
 6e0:	01 f5       	brne	.+64     	; 0x722 <Timer0_VoidStartNormalMode+0x6e>
	{
		Number_overFlow = 3906 ;
 6e2:	82 e4       	ldi	r24, 0x42	; 66
 6e4:	9f e0       	ldi	r25, 0x0F	; 15
 6e6:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <Number_overFlow+0x1>
 6ea:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Number_overFlow>
		Timer0_TCNT0 = 0x00 ;
 6ee:	12 be       	out	0x32, r1	; 50
		// Set 1/64 prescaller
		SET_Bit(Timer0_TCCR0,Timer0_CS00) ;
 6f0:	83 b7       	in	r24, 0x33	; 51
 6f2:	81 60       	ori	r24, 0x01	; 1
 6f4:	83 bf       	out	0x33, r24	; 51
		CLR_Bit(Timer0_TCCR0,Timer0_CS01) ;
 6f6:	83 b7       	in	r24, 0x33	; 51
 6f8:	8d 7f       	andi	r24, 0xFD	; 253
 6fa:	83 bf       	out	0x33, r24	; 51
		CLR_Bit(Timer0_TCCR0,Timer0_CS02) ;
 6fc:	83 b7       	in	r24, 0x33	; 51
 6fe:	8b 7f       	andi	r24, 0xFB	; 251
 700:	83 bf       	out	0x33, r24	; 51
 702:	0f c0       	rjmp	.+30     	; 0x722 <Timer0_VoidStartNormalMode+0x6e>
	
	
	// Check OTOV
	while(Counter_OverFlow < Number_overFlow )
	{
		while((GET_Bit(Timer0_TIFR,Timer0_TOV0)) == 0);
 704:	08 b6       	in	r0, 0x38	; 56
 706:	00 fe       	sbrs	r0, 0
 708:	fd cf       	rjmp	.-6      	; 0x704 <Timer0_VoidStartNormalMode+0x50>
		
		// Rest Over flow
		SET_Bit(Timer0_TIFR,Timer0_TOV0);
 70a:	88 b7       	in	r24, 0x38	; 56
 70c:	81 60       	ori	r24, 0x01	; 1
 70e:	88 bf       	out	0x38, r24	; 56
		Counter_OverFlow ++ ;
 710:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Counter_OverFlow>
 714:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Counter_OverFlow+0x1>
 718:	01 96       	adiw	r24, 0x01	; 1
 71a:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <Counter_OverFlow+0x1>
 71e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Counter_OverFlow>
		CLR_Bit(Timer0_TCCR0,Timer0_CS02) ;
	}
	
	
	// Check OTOV
	while(Counter_OverFlow < Number_overFlow )
 722:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <Counter_OverFlow>
 726:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <Counter_OverFlow+0x1>
 72a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Number_overFlow>
 72e:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <Number_overFlow+0x1>
 732:	28 17       	cp	r18, r24
 734:	39 07       	cpc	r19, r25
 736:	30 f3       	brcs	.-52     	; 0x704 <Timer0_VoidStartNormalMode+0x50>
		SET_Bit(Timer0_TIFR,Timer0_TOV0);
		Counter_OverFlow ++ ;
	};
	
	// Set Counter to 0 to repeate 
	Counter_OverFlow = 0 ;
 738:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Counter_OverFlow+0x1>
 73c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Counter_OverFlow>
 740:	08 95       	ret

00000742 <_exit>:
 742:	f8 94       	cli

00000744 <__stop_program>:
 744:	ff cf       	rjmp	.-2      	; 0x744 <__stop_program>
